exit
DOUBLE_DAMAGE[player1.selected_fighter.type.to_sym].include?("Rock")
DOUBLE_DAMAGE[player1.selected_fighter.type.to_sym].include?(player2.selected_fighter.type)
exit
DOUBLE_DAMAGE[player1.selected_fighter.type.to_sym].include?(player2.selected_fighter.type)
      DOUBLE_DAMAGE[player1.selected_fighter.type].include?(player2.selected_fighter.type)
DOUBLE_DAMAGE["Grass"]
DOUBLE_DAMAGE
DOUBLE_DAMAGE["Grass"]
DOUBLE_DAMAGE["grass"]
player1.selected_fighter.type
player1.selected_figther.type
player1.selected_figher.type
DOUBLE_DAMAGE[player1.selected_fighter.type]
exit
player2.selected_fighter.hp
player1_double_damage? ? player2.hp = player2hp - player1cp * 2 : @player2hp = player2hp - player1cp
exit
player1.selected_fighter.type
player1.selected_fighter.typ
player1.selected_fighter
return true if player1.selected_fighter.type == 'Water' && player2.selected_fighter.type == 'Fire'
return true if player1.selected_fighter.type == 'Water' && player2[0][:type] == 'Fire'
player1
player 1
return true if player1.type == 'Water' && player2[0][:type] == 'Fire'
return true if player1[0][:type] == 'Water' && player2[0][:type] == 'Fire'
c
exit
    hp = player1_double_damage? ? player2.hp = player2hp - player1cp * 2 : @player2hp = player2hp - player1cp
exit
turn
turn == '1' ? player1_attack : player2_attack
exit
random_first_move
exit
random_first_move
exit
random_first_move
exit
rspec
announce_fighters
exit
announce_fighters
exit
player1.selected_fighter
player1.randomly_choose_fighter
exit
announce_fighters
exit
player2.randomly_choose_fighter.name
player2.randomly_choose_fighter
exit
announce_fighters
c
announce_fighters
exit
    puts announce_fighters
    player2.randomly_choose_fighter
    player1.randomly_choose_fighter
exit
player1
player1.choose_kudomon(player1,player2)
player1.selected_fighter
exit
player1.selected_fighter
player1
player1.hp
exit
rspec
turn
exit
turn
exit
c
exit
rspec
@player1 = player1.kudomon.first.hp
@player1 = player1.kudomon.first
@player1 = player1.kudomon.firs
@player1 = player1.kudomon.hp
@player1 = player1.k
exit
player1
@player1 = player1.kudomon
exit
battle.player1
player1
battle.player1
exit
rpec
    "#{caught_kudo.name} was added to your collection"
    "#{caught_kudo[0].name} was added to your collection"
    kudomon << caught_kudo
    caught_kudo = @kudomon_spawn.find {|kudo| kudo.location == coordinates }
exit
@kudomon
    "#{caught_kudo[0].name} was added to your collection"
    kudomon.uniq!
    kudomon << caught_kudo
    caught_kudo = @kudomon_spawn.select {|kudo| kudo.location == coordinates }
exit
@kudomon_spawn.first.location
@kudomon_spawn.first
@kudomon_spawn
exit
@kudomon_spawn.first.name
@kudomon_spawn.first
@kudomon_spawn
exit
@kudomon_spawn.first.name
@kudomon_spawn.first
@kudomon_spawn
exit
@kudomon
exit
@kudomon
exit
@kudomon
exit
@kudomon_spawn
exit
@kudomon_spawn
exit
@kudomon_spawn
@kudomon_Spawn
exit
exot
rspec
exit
Spawn.kudomon
exit
@kudomon
exit
Kudomon.new(('x'),('y'), 4, 222, [-10..10, -10..10])
Kudomon.new(('x'),('y), 4, 222, [-10..10,v-10..10])
Kudomon.new(('x'),('y), rand(100..1000), rand(30..300), [rand(-10..10),rand(-10..10)])
   25:         [rand(-1
Kudomon.new('x'),('y), rand(100..1000), rand(30..300),
exit
(:HP, rand(100..1000))
creature.store(:HP, rand(100..1000))
Kudomon.new("x", ('x'), (102), (103), [0,2])
Kudomon.new
Kudomon.all
exit
Kudomon
Kudomon.first
Kudomon.all
